<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>elisp on bram85</title><link>https://www.bram85.nl/tags/elisp/</link><description>bram85 (elisp)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 27 Apr 2022 21:02:00 +0200</lastBuildDate><atom:link href="https://www.bram85.nl/tags/elisp/index.xml" rel="self" type="application/rss+xml"/><item><title>Emacs Lisp: Expand macros</title><link>https://www.bram85.nl/posts/emacs-lisp-expand-macros/</link><pubDate>Wed, 27 Apr 2022 21:02:00 +0200</pubDate><guid>https://www.bram85.nl/posts/emacs-lisp-expand-macros/</guid><description>&lt;p>To expand a macro, the &lt;code>pp-macroexpand-last-sexp&lt;/code> is a useful function. It&amp;rsquo;s like &lt;code>pp-eval-last-sexp&lt;/code>, but opens a new buffer with the expanded code without evaluation.&lt;/p>
&lt;p>For example, it&amp;rsquo;s easy to inspect the magic behind &lt;code>use-package&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elisp" data-lang="elisp">&lt;span style="display:flex;">&lt;span>(use-package org)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>is transformed by &lt;code>pp-macroexpand-last-sexp&lt;/code> to:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elisp" data-lang="elisp">&lt;span style="display:flex;">&lt;span>(progn
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (straight-use-package &lt;span style="color:#e6db74">&amp;#39;org&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (defvar use-package--warning117
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">#&amp;#39;&lt;/span>(lambda
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (keyword err)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (let
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ((msg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">format&lt;/span> &lt;span style="color:#e6db74">&amp;#34;%s/%s: %s&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;org&lt;/span> keyword
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">error-message-string&lt;/span> err))))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (display-warning &lt;span style="color:#e6db74">&amp;#39;use-package&lt;/span> msg :error))))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (condition-case-unless-debug err
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (if
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (not
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (require &lt;span style="color:#e6db74">&amp;#39;org&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#66d9ef">t&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (display-warning &lt;span style="color:#e6db74">&amp;#39;use-package&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">format&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Cannot load %s&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;org&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :error))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">funcall&lt;/span> use-package--warning117 :catch err))))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Of course it becomes more elaborate with &lt;code>:config&lt;/code>, &lt;code>:bind&lt;/code>, &lt;code>:hook&lt;/code> flags, but you get the idea.&lt;/p></description></item></channel></rss>